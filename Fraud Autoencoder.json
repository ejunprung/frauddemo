{"paragraphs":[{"text":"","user":"admin","dateUpdated":"2018-03-05T00:58:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Imports</h3>\n"}]},"apps":[],"jobName":"paragraph_1520211190202_-743861929","id":"20180305-005310_2014151456","dateCreated":"2018-03-05T00:53:10+0000","dateStarted":"2018-03-05T00:57:09+0000","dateFinished":"2018-03-05T00:57:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4565"},{"text":"%md\n### Imports","user":"admin","dateUpdated":"2018-03-05T00:57:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Imports</h3>\n"}]},"apps":[],"jobName":"paragraph_1520211431882_-396111865","id":"20180305-005711_1475767514","dateCreated":"2018-03-05T00:57:11+0000","dateStarted":"2018-03-05T00:57:23+0000","dateFinished":"2018-03-05T00:57:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4566"},{"text":"%pyspark\n\nimport numpy as np\nimport pandas as pd\nimport random\nfrom sklearn import preprocessing\nfrom keras.models import Sequential\nfrom keras.utils import np_utils\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.optimizers import SGD\nfrom keras.layers import Input, Dense\nfrom keras.models import Model\nimport keras.backend as K\nfrom keras.models import load_model\nimport keras\nimport csv","user":"admin","dateUpdated":"2018-03-05T00:58:34+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"/opt/skil/miniconda/lib/python2.7/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\nUsing TensorFlow backend.\n"}]},"apps":[],"jobName":"paragraph_1520210943696_-1265733035","id":"20180305-004903_1028130266","dateCreated":"2018-03-05T00:49:03+0000","dateStarted":"2018-03-05T00:58:34+0000","dateFinished":"2018-03-05T00:58:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4567"},{"text":"%md\n### Data Processing\n","user":"admin","dateUpdated":"2018-03-05T00:57:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Data Processing</h3>\n"}]},"apps":[],"jobName":"paragraph_1520211467692_-824475308","id":"20180305-005747_1334512033","dateCreated":"2018-03-05T00:57:47+0000","dateStarted":"2018-03-05T00:57:59+0000","dateFinished":"2018-03-05T00:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4568"},{"text":"%pyspark\n\n# Set seed\nrandom.seed(123)\n\n# Read in data\ndf = pd.read_csv('https://bpstore1.blob.core.windows.net/anomalydetection/fraud.csv')\n\n# Convert string data to categorical\ndf['type'] =  df['type'].astype('category')\ndf['nameOrig'] =  df['nameOrig'].astype('category')\ndf['nameDest'] =  df['nameDest'].astype('category')\ndf['step'] = df['step'].astype('float')\ndf['isFlaggedFraud'] = df['isFlaggedFraud'].astype('float')\n\ncat_columns = df.select_dtypes(['category']).columns\ndf[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)\n\n# Convert integer type to float\ndf['type'] =  df['type'].astype('float')\ndf['nameOrig'] =  df['nameOrig'].astype('float')\ndf['nameDest'] =  df['nameDest'].astype('float')\n\n# Scale data between 0 adn 1\nx = df.values \n\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf = pd.DataFrame(x_scaled, columns = [\"step\", \"type\", \"amount\", \"nameOrig\", \n    \"oldbalanceOrg\", \"newbalanceOrig\", \"nameDest\", \"oldbalanceDest\", \"newbalanceDest\", \n    \"isFraud\", \"isFlaggedFraud\"])","user":"admin","dateUpdated":"2018-03-05T00:58:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1520211035458_628739901","id":"20180305-005035_1859748507","dateCreated":"2018-03-05T00:50:35+0000","dateStarted":"2018-03-05T00:58:36+0000","dateFinished":"2018-03-05T00:58:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4569"},{"text":"%pyspark\n\n# Create training data\ntrain_df = df.iloc[ 1:100000,:]\ntrain_df = train_df[train_df.isFraud == 0]\n\nX_train = train_df.loc[:, ['step','type', 'amount', 'nameOrig', 'oldbalanceOrg', 'newbalanceOrig','nameDest' , 'oldbalanceDest', 'newbalanceDest', 'isFlaggedFraud']]\nX_train = np.array(X_train)\n","user":"admin","dateUpdated":"2018-03-05T00:58:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1520211139450_1937376535","id":"20180305-005219_857320467","dateCreated":"2018-03-05T00:52:19+0000","dateStarted":"2018-03-05T00:58:47+0000","dateFinished":"2018-03-05T00:58:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4570"},{"text":"%md\n\n### Autoencoder Model","user":"admin","dateUpdated":"2018-03-05T00:58:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Autoencoder Model</h3>\n"}]},"apps":[],"jobName":"paragraph_1520211487374_1140483297","id":"20180305-005807_1320125730","dateCreated":"2018-03-05T00:58:07+0000","dateStarted":"2018-03-05T00:58:14+0000","dateFinished":"2018-03-05T00:58:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4571"},{"text":"%pyspark\n# Create autoencoder model\n\ninput_r = Input(shape=(10,))\nencoded = Dense(25, activation='relu')(input_r)\nh1 = Dense(12, activation='relu')(encoded)\nh2 = Dense(10, activation='relu')(h1)\nh3 = Dense(12, activation='relu')(h2)\nh4 = Dense(25, activation='relu')(h3)\ndecoded = Dense(10, activation='tanh')(h4)\n\nautoencoder = Model(input_r, decoded)\nautoencoder.compile(optimizer='adadelta', loss='mse')","user":"admin","dateUpdated":"2018-03-05T00:58:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1520211058268_689160802","id":"20180305-005058_1374542233","dateCreated":"2018-03-05T00:50:58+0000","dateStarted":"2018-03-05T00:58:56+0000","dateFinished":"2018-03-05T00:58:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4572"},{"text":"%pyspark\n\n# Train model\nautoencoder.fit(X_train, X_train, epochs=10, batch_size=16, validation_split=0.1, verbose=2)","user":"admin","dateUpdated":"2018-03-05T00:58:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Train on 89943 samples, validate on 9994 samples\nEpoch 1/10\n2018-03-05 00:58:56.772010: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n - 12s - loss: 0.0019 - val_loss: 3.8045e-04\nEpoch 2/10\n - 12s - loss: 1.9773e-04 - val_loss: 1.5935e-04\nEpoch 3/10\n - 12s - loss: 1.3213e-04 - val_loss: 1.1355e-04\nEpoch 4/10\n - 12s - loss: 1.0711e-04 - val_loss: 2.1476e-04\nEpoch 5/10\n - 11s - loss: 9.1962e-05 - val_loss: 1.5932e-04\nEpoch 6/10\n - 12s - loss: 8.3272e-05 - val_loss: 1.2360e-04\nEpoch 7/10\n - 12s - loss: 7.7738e-05 - val_loss: 1.9428e-04\nEpoch 8/10\n - 12s - loss: 7.3101e-05 - val_loss: 1.1243e-04\nEpoch 9/10\n - 12s - loss: 6.9684e-05 - val_loss: 1.0283e-04\nEpoch 10/10\n - 12s - loss: 6.6319e-05 - val_loss: 1.2351e-04\n<keras.callbacks.History object at 0x7f67d2e12ed0>\n"}]},"apps":[],"jobName":"paragraph_1520211067933_-132865351","id":"20180305-005107_2142756763","dateCreated":"2018-03-05T00:51:07+0000","dateStarted":"2018-03-05T00:58:56+0000","dateFinished":"2018-03-05T01:00:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4573"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2018-03-05T00:57:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520211181052_-1087088596","id":"20180305-005301_986177047","dateCreated":"2018-03-05T00:53:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4574"}],"name":"Anomaly Detection AE","id":"2D8MN38VX","angularObjects":{"2D9577PF1:existing_process":[],"2D86VT151:existing_process":[],"2D7PUMBZ1:existing_process":[],"2D7V8B4SM:existing_process":[],"2D6JWT1U6:existing_process":[],"2D8S4RU7Z:existing_process":[],"2D9YYJMG9:existing_process":[],"2D86WT5A7:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}